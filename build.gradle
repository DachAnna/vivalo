plugins {
    id 'java'
    id "io.qameta.allure" version "2.8.1"
    id "io.freefair.lombok" version "6.0.0-m2"
}

def allureVersion = "2.16.1",
    junitVersion = "5.8.2"

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

repositories {
    mavenCentral()
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation (
            "io.rest-assured:rest-assured:4.4.0",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:json-schema-validator:4.3.1",
            "org.assertj:assertj-core:3.21.0",
            "org.aspectj:aspectjweaver:1.9.19",
            'com.codeborne:selenide:6.12.3',
            'org.junit.jupiter:junit-jupiter:5.9.2',
            'org.junit.jupiter:junit-jupiter-params:5.9.2',
            'io.qameta.allure:allure-selenide:2.21.0',
            "org.aeonbits.owner:owner:1.0.12",
            'com.github.javafaker:javafaker:1.0.2')
    testImplementation 'org.projectlombok:lombok:1.18.28'
    testRuntimeOnly ('org.slf4j:slf4j-simple:2.0.5',
            "org.junit.jupiter:junit-jupiter-engine:5.9.2")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()
    systemProperties += [
            'junit.jupiter.execution.parallel.enabled'                 : System.getProperty("parallelRun"),
            'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
            'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
            'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
            'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads", "2").toInteger()
    ]
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

}

task search_tests(type: Test) {
    useJUnitPlatform {
        includeTags "b2btest"
    }
}
task searchpage_tests(type: Test) {
    useJUnitPlatform {
        includeTags "filterstest"
    }
}
task mainpage_tests(type: Test) {
    useJUnitPlatform {
        includeTags "mainpagetest"
    }
    task tabpage_tests(type: Test) {
        useJUnitPlatform {
            includeTags "catalogtest"
        }
    }
}